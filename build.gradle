description = 'Spring Integration'

apply plugin: 'base'
apply plugin: 'idea'

buildscript {
	repositories {
		maven { url 'http://repo.spring.io/plugins-release' }
	}
	dependencies {
		classpath 'org.springframework.build.gradle:spring-io-plugin:0.0.3.RELEASE'
		classpath 'org.springframework.build.gradle:docbook-reference-plugin:0.2.8'
	}
}

ext {
	linkHomepage = 'https://projects.spring.io/spring-integration'
	linkCi = 'https://build.springsource.org/browse/INT'
	linkIssue = 'https://jira.springsource.org/browse/INT'
	linkScmUrl = 'https://github.com/spring-projects/spring-integration'
	linkScmConnection = 'scm:git:git://github.com/spring-projects/spring-integration.git'
	linkScmDevConnection = 'scm:git:ssh://git@github.com:spring-projects/spring-integration.git'
}

allprojects {
	group = 'org.springframework.integration'

	repositories {
		if (version.endsWith('BUILD-SNAPSHOT') || project.hasProperty('platformVersion')) {
			maven { url 'http://repo.spring.io/libs-snapshot' }
		}
		maven { url 'http://repo.spring.io/libs-milestone' }
		maven { url 'http://repo.spring.io/plugins-release' }
		mavenCentral()
	}

	ext.javadocLinks = [
		'http://docs.oracle.com/javase/7/docs/api/',
		'http://docs.oracle.com/javaee/6/api/',
		'http://docs.spring.io/spring/docs/current/javadoc-api/',
		'http://docs.spring.io/spring-amqp/docs/latest-ga/api/',
		'http://docs.spring.io/spring-data-gemfire/docs/current/api/',
		'http://docs.spring.io/spring-data/data-mongo/docs/current/api/',
		'http://docs.spring.io/spring-data/data-redis/docs/current/api/',
		'http://docs.spring.io/spring-social-twitter/docs/current/apidocs/',
		'http://docs.spring.io/spring-ws/sites/2.0/apidocs/'
	] as String[]

}

subprojects { subproject ->

	apply plugin: 'java'
	apply from:   "${rootProject.projectDir}/publish-maven.gradle"
	apply plugin: 'eclipse'
	apply plugin: 'idea'

	if (project.hasProperty('platformVersion')) {
		apply plugin: 'spring-io'

		dependencies {
			springIoVersions "io.spring.platform:platform-versions:${platformVersion}@properties"
		}
	}

	sourceCompatibility=1.6
	targetCompatibility=1.6

	ext {
		activeMqVersion = '5.9.0'
		aspectjVersion = '1.8.0'
		apacheSshdVersion = '0.10.1'
		commonsDbcpVersion = '1.4'
		commonsIoVersion = '2.4'
		commonsNetVersion = '3.3'
		httpClientVersion = '3.1'
		derbyVersion = '10.10.1.1'
		eclipseLinkVersion = '2.4.2'
		ftpServerVersion = '1.0.6'
		groovyVersion = '2.3.1'
		guavaVersion = '16.0.1'
		hamcrestVersion = '1.3'
		hibernateVersion = '4.2.11.Final'
		hsqldbVersion = '2.3.2'
		h2Version = '1.3.175'
		jacksonVersion = '1.9.13'
		jackson2Version = '2.3.2'
		javaxActivationVersion = '1.1.1'
		javaxMailVersion = '1.4.7'
		jedisVersion = '2.4.2'
		jmsApiVersion = '1.1-rev-1'
		jpaApiVersion = '2.0.0'
		jrubyVersion = '1.7.12'
		jschVersion = '0.1.51'
		jsonpathVersion = '0.9.1'
		junitVersion = '4.11'
		jythonVersion = '2.5.3'
		log4jVersion = '1.2.17'
		mockitoVersion = '1.9.5'
		mysqlVersion = '5.1.29'
		openJpaVersion = '2.3.0'
		pahoMqttClientVersion = '0.4.0'
		postgresVersion = '9.1-901-1.jdbc4'
		reactorVersion = '1.1.2.RELEASE'
		romeToolsVersion = '1.5.0'
		romeVersion = '1.0.0'
		saajApiVersion = '1.3.5'
		saajImplVersion = '1.3.23'
		servletApiVersion = '3.1.0'
		slf4jVersion = "1.7.6"
		smack3Version = '3.2.1'
		smackVersion = '4.0.0'
		springAmqpVersion = project.hasProperty('springAmqpVersion') ? project.springAmqpVersion : '1.3.5.RELEASE'
		springDataMongoVersion = '1.5.0.RELEASE'
		springDataRedisVersion = '1.3.0.RELEASE'
		springGemfireVersion = '1.4.0.RELEASE'
		springSecurityVersion = '3.2.4.RELEASE'
		springSocialTwitterVersion = '1.1.0.RELEASE'
		springRetryVersion = '1.1.0.RELEASE'
		springVersion = project.hasProperty('springVersion') ? project.springVersion : '4.0.6.RELEASE'
		springWsVersion = '2.2.0.RELEASE'
		xmlUnitVersion = '1.5'
		xstreamVersion = '1.4.7'
		commonsIOVersion = '1.3.2'
	}

	eclipse {
		project {
			natures += 'org.springframework.ide.eclipse.core.springnature'
		}
	}

	sourceSets {
		test {
			resources {
				srcDirs = ['src/test/resources', 'src/test/java']
			}
		}
	}

	// See http://www.gradle.org/docs/current/userguide/dependency_management.html#sub:configurations
	// and http://www.gradle.org/docs/current/dsl/org.gradle.api.artifacts.ConfigurationContainer.html
	configurations {
		jacoco //Configuration Group used by Sonar to provide Code Coverage using JaCoCo
	}

	// dependencies that are common across all java projects
	dependencies {
		testCompile ("junit:junit:$junitVersion") {
			exclude group: 'org.hamcrest'
		}
		testCompile "log4j:log4j:$log4jVersion"
		testCompile "org.hamcrest:hamcrest-all:$hamcrestVersion"
		testCompile ("org.mockito:mockito-core:$mockitoVersion") {
			exclude group: 'org.hamcrest'
		}
		testCompile "org.springframework:spring-test:$springVersion"
		if (!(subproject.name ==~ /.*-(core|test)/)) {
			testCompile project(":spring-integration-test")
		}
		jacoco group: "org.jacoco", name: "org.jacoco.agent", version: "0.5.6.201201232323", classifier: "runtime"
	}

	// enable all compiler warnings; individual projects may customize further
	ext.xLintArg = '-Xlint:all,-options'
	[compileJava, compileTestJava]*.options*.compilerArgs = [xLintArg]

	task checkTestConfigs {
		doLast {
			def configFiles = []
			sourceSets.test.java.srcDirs.each {
				fileTree(it).include('**/*.xml').exclude('**/log4j.xml').each { configFile ->
					def configXml = new XmlParser(false, false).parse(configFile)

					if (configXml.@'xsi:schemaLocation' ==~ /.*spring-[a-z-]*\d\.\d\.xsd.*/) {
						configFiles << configFile
					}
				}
			}
			if (configFiles) {
				throw new InvalidUserDataException('Hardcoded XSD version in the config files:\n' +
						configFiles.collect {relativePath(it)}.join('\n') +
						'\nPlease, use versionless schemaLocations for Spring XSDs to avoid issues with builds ' +
						'on different versions of dependencies.')
			}
		}
	}

	test {
		jvmArgs "-javaagent:${configurations.jacoco.asPath}=destfile=${buildDir}/jacoco.exec,includes=org.springframework.integration.*"
	}

	task testAll(type: Test)

	tasks.withType(Test).all {
		// suppress all console output during testing unless running `gradle -i`
		logging.captureStandardOutput(LogLevel.INFO)
		dependsOn checkTestConfigs

		if (name ==~ /(springIo.*)|(testAll)/) {
			systemProperty 'RUN_LONG_INTEGRATION_TESTS', 'true'
		}
	}

	task sourcesJar(type: Jar) {
		classifier = 'sources'
		from sourceSets.main.allJava
	}

	task javadocJar(type: Jar) {
		classifier = 'javadoc'
		from javadoc
	}

	artifacts {
		archives sourcesJar
		archives javadocJar
	}

}

project('spring-integration-amqp') {
	description = 'Spring Integration AMQP Support'
	dependencies {
		compile project(":spring-integration-core")
		compile "org.springframework:spring-tx:$springVersion"
		compile("org.springframework.amqp:spring-rabbit:$springAmqpVersion") {
			exclude group: 'org.springframework', module: 'spring-aop'
			exclude group: 'org.springframework', module: 'spring-context'
			exclude group: 'org.springframework', module: 'spring-core'
			exclude group: 'org.springframework', module: 'spring-tx'
		}
		testCompile project(":spring-integration-stream")
		testCompile project(":spring-integration-http") // need to test INT-2713
	}
}

project('spring-integration-core') {
	description = 'Spring Integration Core'
	dependencies {
		compile "org.springframework:spring-aop:$springVersion"
		compile "org.springframework:spring-context:$springVersion"
		compile "org.springframework:spring-messaging:$springVersion"
		compile "org.springframework:spring-tx:$springVersion"
		compile "org.springframework.retry:spring-retry:$springRetryVersion"
		compile "org.projectreactor:reactor-core:$reactorVersion"
		compile("org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", optional)
		compile("com.fasterxml.jackson.core:jackson-databind:$jackson2Version", optional)
		compile("com.jayway.jsonpath:json-path:$jsonpathVersion", optional)

		testCompile ("org.aspectj:aspectjweaver:$aspectjVersion")
	}
}

project('spring-integration-event') {
	description = 'Spring Integration ApplicationEvent Support'
	dependencies {
		compile project(":spring-integration-core")
		compile "org.springframework:spring-context:$springVersion"
	}
}

project('spring-integration-feed') {
	description = 'Spring Integration RSS Feed Support'
	dependencies {
		compile project(":spring-integration-core")
		compile "org.springframework:spring-context:$springVersion"
		compile ("net.java.dev.rome:rome-fetcher:$romeVersion") {
			exclude group: 'junit', module: 'junit'
		}
		compile "net.java.dev.rome:rome:$romeVersion"
	}
}

project('spring-integration-file') {
	description = 'Spring Integration File Support'
	dependencies {
		compile project(":spring-integration-core")
		compile "org.springframework:spring-context:$springVersion"
		compile "commons-io:commons-io:$commonsIoVersion"
		testCompile project(":spring-integration-redis")
		testCompile project(":spring-integration-redis").sourceSets.test.output
		testCompile project(":spring-integration-gemfire")
		testCompile "redis.clients:jedis:$jedisVersion"
	}
}

project('spring-integration-ftp') {
	description = 'Spring Integration FTP Support'
	dependencies {
		compile project(":spring-integration-file")
		compile "commons-net:commons-net:$commonsNetVersion"
		compile "org.springframework:spring-context-support:$springVersion"
		compile("javax.activation:activation:$javaxActivationVersion", optional)
		testCompile "org.apache.ftpserver:ftpserver-core:$ftpServerVersion"
	}
}

project('spring-integration-gemfire') {
	description = 'Spring Integration GemFire Support'
	tasks.withType(Test).matching {it.name ==~ /(springIo.+)|(test)|(testAll)/}.all {
		forkEvery = 1
		systemProperties['gemfire.disableShutdownHook'] = 'true'
	}
	dependencies {
		compile project(":spring-integration-core")
		compile ("org.springframework.data:spring-data-gemfire:$springGemfireVersion") {
			exclude group: 'org.springframework', module: 'spring-aop'
			exclude group: 'org.springframework', module: 'spring-beans'
			exclude group: 'org.springframework', module: 'spring-context'
			exclude group: 'org.springframework', module: 'spring-context-support'
			exclude group: 'org.springframework', module: 'spring-core'
			exclude group: 'org.springframework', module: 'spring-tx'
		}
		compile "org.springframework:spring-tx:$springVersion"
		testCompile project(":spring-integration-stream")

	}
}

project('spring-integration-groovy') {
	description = 'Spring Integration Groovy Support'
	dependencies {
		compile project(":spring-integration-core")
		compile project(":spring-integration-scripting")
		compile "org.codehaus.groovy:groovy-all:$groovyVersion"
		compile "org.springframework:spring-context-support:$springVersion"
		testCompile "org.springframework:spring-web:$springVersion"
	}
}

project('spring-integration-http') {
	description = 'Spring Integration HTTP Support'
	dependencies {
		compile project(":spring-integration-core")
		compile "org.springframework:spring-webmvc:$springVersion"
		compile("net.java.dev.rome:rome-fetcher:$romeVersion") {
			optional
			exclude group: 'junit', module: 'junit'
		}

		compile("com.rometools:rome:$romeToolsVersion", optional) //For spring-web-4.1

		compile("javax.servlet:javax.servlet-api:$servletApiVersion", provided)

		testCompile "commons-httpclient:commons-httpclient:$httpClientVersion"
	}
}

project('spring-integration-ip') {
	description = 'Spring Integration IP Support'
	dependencies {
		compile project(":spring-integration-core")
		compile "org.springframework:spring-context:$springVersion"
		testCompile project(":spring-integration-stream")
	}
}

project('spring-integration-jdbc') {
	description = 'Spring Integration JDBC Support'
	dependencies {
		compile project(":spring-integration-core")
		compile "org.springframework:spring-aop:$springVersion"
		compile "org.springframework:spring-jdbc:$springVersion"
		compile "org.springframework:spring-tx:$springVersion"
		compile "com.google.guava:guava:$guavaVersion"
		testCompile "com.h2database:h2:$h2Version"
		testCompile "org.hsqldb:hsqldb:$hsqldbVersion"
		testCompile "org.apache.derby:derby:$derbyVersion"
		testCompile "org.apache.derby:derbyclient:$derbyVersion"

		testCompile "postgresql:postgresql:$postgresVersion"
		testCompile "mysql:mysql-connector-java:$mysqlVersion"
		testCompile "commons-dbcp:commons-dbcp:$commonsDbcpVersion"

	}

	// suppress derby localization jar path warnings during test compilation
	compileTestJava.options.compilerArgs = ["${xLintArg},-path"]
}

project('spring-integration-jms') {
	description = 'Spring Integration JMS Support'
	dependencies {
		compile project(":spring-integration-core")
		compile "org.springframework:spring-jms:$springVersion"
		compile "org.springframework:spring-tx:$springVersion"
		compile ("javax.jms:jms-api:$jmsApiVersion", provided)
		testCompile("org.apache.activemq:activemq-broker:$activeMqVersion")
		testCompile("org.apache.activemq:activemq-kahadb-store:$activeMqVersion") {
			exclude group: "org.springframework"
		}
		testCompile "org.springframework:spring-oxm:$springVersion"
	}
}

project('spring-integration-jmx') {
	description = 'Spring Integration JMX Support'
	dependencies {
		compile project(":spring-integration-core")
		compile "org.springframework:spring-context:$springVersion"
		testCompile "org.aspectj:aspectjweaver:$aspectjVersion"
	}
}

project('spring-integration-jpa') {
	description = 'Spring Integration JPA Support'
	dependencies {
		compile project(":spring-integration-core")
		compile "org.springframework:spring-aop:$springVersion"
		compile "org.springframework:spring-orm:$springVersion"
		compile "org.springframework:spring-tx:$springVersion"
		compile "org.eclipse.persistence:javax.persistence:$jpaApiVersion"

		testCompile "com.h2database:h2:$h2Version"
		testCompile "org.hsqldb:hsqldb:$hsqldbVersion"
		testCompile "org.apache.derby:derby:$derbyVersion"

		testCompile "org.hibernate:hibernate-entitymanager:$hibernateVersion"

		testCompile ("org.apache.openjpa:openjpa:$openJpaVersion") {
			exclude group: 'org.apache.geronimo.specs'
		}

		testRuntime "org.eclipse.persistence:org.eclipse.persistence.jpa:$eclipseLinkVersion"
		testRuntime "org.springframework:spring-instrument:$springVersion"
	}

	//Suppress openjpa annotation processor warnings
	compileTestJava.options.compilerArgs = ["${xLintArg},-processing"]

	tasks.withType(Test).matching {it.name ==~ /(springIo.+)|(test)|(testAll)/}.all {
		jvmArgs classpath.files.findAll{it.name ==~ /(spring-instrument.+)|(openjpa.+)/}.collect{"-javaagent:$it"}
	}

}

project('spring-integration-mail') {
	description = 'Spring Integration Mail Support'
	dependencies {
		compile project(":spring-integration-core")
		compile "org.springframework:spring-context-support:$springVersion"
		compile("javax.mail:javax.mail-api:$javaxMailVersion", provided)
		compile("com.sun.mail:imap:$javaxMailVersion", provided)
		compile("javax.activation:activation:$javaxActivationVersion", optional)
		testRuntime "com.sun.mail:mailapi:$javaxMailVersion"
	}

	// suppress javax.activation path warnings
	[compileJava,compileTestJava]*.options*.compilerArgs = ["${xLintArg},-path"]
}

project('spring-integration-mongodb') {
	description = 'Spring Integration MongoDB Support'
	dependencies {
		compile project(":spring-integration-core")
		compile "org.springframework:spring-tx:$springVersion"
		compile("org.springframework.data:spring-data-mongodb:$springDataMongoVersion") {
			exclude group: 'org.springframework', module: 'spring-beans'
			exclude group: 'org.springframework', module: 'spring-context'
			exclude group: 'org.springframework', module: 'spring-core'
			exclude group: 'org.springframework', module: 'spring-expression'
			exclude group: 'org.springframework', module: 'spring-tx'
		}
	}
}

project('spring-integration-mqtt') {
	description = 'Spring Integration MQTT Support'
	dependencies {
		compile project(":spring-integration-core")
		compile "org.eclipse.paho:mqtt-client:$pahoMqttClientVersion"
	}
}

project('spring-integration-redis') {
	description = 'Spring Integration Redis Support'
	dependencies {
		compile project(":spring-integration-core")
		compile "org.springframework:spring-tx:$springVersion"
		compile ("org.springframework.data:spring-data-redis:$springDataRedisVersion") {
			exclude group: 'org.springframework', module: 'spring-beans'
			exclude group: 'org.springframework', module: 'spring-context'
			exclude group: 'org.springframework', module: 'spring-context-support'
			exclude group: 'org.springframework', module: 'spring-core'
			exclude group: 'org.springframework', module: 'spring-tx'
		}
		testCompile "redis.clients:jedis:$jedisVersion"
		testCompile "org.slf4j:slf4j-log4j12:$slf4jVersion"
		testCompile "org.apache.commons:commons-io:$commonsIOVersion"
	}
}

project('spring-integration-rmi') {
	description = 'Spring Integration RMI Support'
	dependencies {
		compile project(":spring-integration-core")
		compile "org.springframework:spring-aop:$springVersion"
		compile "org.springframework:spring-context:$springVersion"
	}
}

project('spring-integration-scripting') {
	description = 'Spring Integration Scripting Support'
	dependencies {
		compile project(":spring-integration-core")
		testCompile("org.jruby:jruby:$jrubyVersion")
		testCompile("org.codehaus.groovy:groovy-all:$groovyVersion")
		testCompile("org.python:jython-standalone:$jythonVersion")
	}
}

project('spring-integration-security') {
	description = 'Spring Integration Security Support'
	dependencies {
		compile project(":spring-integration-core")
		compile "org.springframework:spring-aop:$springVersion"
		compile "org.springframework:spring-tx:$springVersion"
		compile("org.springframework.security:spring-security-core:$springSecurityVersion") {
			exclude group: 'org.springframework', module: 'spring-support'
		}
		compile("org.springframework.security:spring-security-config:$springSecurityVersion") {
			exclude group: 'org.springframework', module: 'spring-support'
		}
	}
}

project('spring-integration-sftp') {
	description = 'Spring Integration SFTP Support'
	dependencies {
		compile project(":spring-integration-core")
		compile project(":spring-integration-file")
		compile project(":spring-integration-stream")
		compile "com.jcraft:jsch:$jschVersion"
		compile "org.springframework:spring-context-support:$springVersion"
		compile("javax.activation:activation:$javaxActivationVersion", optional)
		testCompile "org.apache.sshd:sshd-core:$apacheSshdVersion"
	}
}

project('spring-integration-stream') {
	description = 'Spring Integration Stream Support'
	dependencies {
		compile project(":spring-integration-core")
		compile "org.springframework:spring-context:$springVersion"
	}
}

project('spring-integration-syslog') {
	description = 'Spring Integration Syslog Support'
	dependencies {
		compile project(":spring-integration-ip")
	}
}

project('spring-integration-test') {
	description = 'Spring Integration Test Support'
	dependencies {
		compile project(":spring-integration-core")
		compile ("junit:junit:$junitVersion") {
			exclude group: 'org.hamcrest', module: 'hamcrest-core'
		}
		compile "org.hamcrest:hamcrest-all:$hamcrestVersion"
		compile ("org.mockito:mockito-core:$mockitoVersion") {
			exclude group: 'org.hamcrest', module: 'hamcrest-core'
		}
		compile "org.springframework:spring-context:$springVersion"
		compile "org.springframework:spring-test:$springVersion"
	}
}

project('spring-integration-twitter') {
	description = 'Spring Integration Twitter Support'
	dependencies {
		compile project(":spring-integration-core")
		compile "org.springframework:spring-web:$springVersion"
		compile("org.springframework.social:spring-social-twitter:$springSocialTwitterVersion") {
			exclude group: 'org.springframework', module: 'spring-beans'
			exclude group: 'org.springframework', module: 'spring-context'
			exclude group: 'org.springframework', module: 'spring-core'
			exclude group: 'org.springframework', module: 'spring-expression'
			exclude group: 'org.springframework', module: 'spring-web'
			exclude group: 'org.springframework', module: 'spring-webmvc'

		}
		compile("javax.activation:activation:$javaxActivationVersion", optional)
		testCompile project(":spring-integration-redis")
		testCompile project(":spring-integration-redis").sourceSets.test.output
		testCompile "redis.clients:jedis:$jedisVersion"
	}
}

project('spring-integration-websocket') {
	description = 'Spring Integration WebSockets Support'
	dependencies {
		compile project(":spring-integration-core")
		compile "org.springframework:spring-websocket:$springVersion"
	}
}

project('spring-integration-ws') {
	description = 'Spring Integration Web Services Support'
	dependencies {
		compile project(":spring-integration-core")
		compile "org.springframework:spring-expression:$springVersion"
		compile "org.springframework:spring-oxm:$springVersion"
		compile "org.springframework:spring-webmvc:$springVersion"
		compile ("org.springframework.ws:spring-ws-core:$springWsVersion") {
			exclude group: 'org.springframework', module: 'spring-aop'
			exclude group: 'org.springframework', module: 'spring-beans'
			exclude group: 'org.springframework', module: 'spring-context'
			exclude group: 'org.springframework', module: 'spring-core'
			exclude group: 'org.springframework', module: 'spring-oxm'
			exclude group: 'org.springframework', module: 'spring-web'
			exclude group: 'org.springframework', module: 'spring-webmvc'
		}
		compile("javax.xml.soap:saaj-api:$saajApiVersion") { dep ->
			optional dep
			exclude group: 'javax.activation', module: 'activation'
		}
		compile("com.sun.xml.messaging.saaj:saaj-impl:$saajImplVersion", optional)
		compile("javax.activation:activation:$javaxActivationVersion", optional)
		testCompile "com.thoughtworks.xstream:xstream:$xstreamVersion"
		testCompile ("org.springframework.ws:spring-ws-support:$springWsVersion") {
			exclude group: 'org.springframework'
		}
		testCompile ("org.springframework:spring-jms:$springVersion") {
			exclude group: 'org.springframework'
		}
		testCompile "javax.jms:jms-api:$jmsApiVersion"
		testCompile "org.igniterealtime.smack:smack:$smack3Version"
		testCompile "org.igniterealtime.smack:smackx:$smack3Version"
		testCompile "javax.mail:javax.mail-api:$javaxMailVersion"
		testRuntime "com.sun.mail:mailapi:$javaxMailVersion"
	}

	// suppress saaj path warnings
	[compileJava,compileTestJava]*.options*.compilerArgs = ["${xLintArg},-path"]
}

project('spring-integration-xml') {
	description = 'Spring Integration XML Support'
	dependencies {
		compile project(":spring-integration-core")
		compile "org.springframework:spring-context:$springVersion"
		compile "org.springframework:spring-oxm:$springVersion"
		compile ("org.springframework.ws:spring-xml:$springWsVersion") {
			exclude group: 'org.springframework', module: 'spring-beans'
			exclude group: 'org.springframework', module: 'spring-context'
			exclude group: 'org.springframework', module: 'spring-core'
		}
		compile("javax.activation:activation:$javaxActivationVersion", optional)
		testCompile "xmlunit:xmlunit:$xmlUnitVersion"
	}
}

project('spring-integration-xmpp') {
	description = 'Spring Integration XMPP Support'
	dependencies {
		compile project(":spring-integration-core")
		compile("javax.activation:activation:$javaxActivationVersion", optional)
		compile "org.igniterealtime.smack:smack-tcp:$smackVersion"
		compile "org.igniterealtime.smack:smack-resolver-javax:$smackVersion"
		compile "org.igniterealtime.smack:smack-extensions:$smackVersion"
		compile "org.springframework:spring-context-support:$springVersion"
		testCompile project(":spring-integration-stream")
	}
}

project("spring-integration-bom") {
	description = "Spring Integration (Bill of Materials)"

	configurations.archives.artifacts.clear()
	artifacts {
		// work around GRADLE-2406 by attaching text artifact
		archives(file("spring-integration-bom.txt"))
	}

	install {
		repositories.mavenInstaller {
			pom.whenConfigured {
				packaging = "pom"
				withXml {
					asNode().children().last() + {
						delegate.dependencyManagement {
							delegate.dependencies {
								parent.subprojects.sort { "$it.name" }.each { p ->
									if (p != project) {
										delegate.dependency {
											delegate.groupId(p.group)
											delegate.artifactId(p.name)
											delegate.version(p.version)
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

apply plugin: 'docbook-reference'

reference {
	sourceDir = file('src/reference/docbook')
}


apply plugin: 'sonar-runner'

sonarRunner {
	sonarProperties {
		property "sonar.jacoco.reportPath", "${buildDir.name}/jacoco.exec"
		property "sonar.links.homepage", linkHomepage
		property "sonar.links.ci", linkCi
		property "sonar.links.issue", linkIssue
		property "sonar.links.scm", linkScmUrl
		property "sonar.links.scm_dev", linkScmDevConnection
		property "sonar.java.coveragePlugin", "jacoco"
	}
}

task api(type: Javadoc) {
	group = 'Documentation'
	description = 'Generates aggregated Javadoc API documentation.'
	title = "${rootProject.description} ${version} API"
	options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
	options.author = true
	options.header = rootProject.description
	options.overview = 'src/api/overview.html'
	options.stylesheetFile = file("src/api/stylesheet.css")
	options.links(project.ext.javadocLinks)
	source subprojects.collect { project ->
		project.sourceSets.main.allJava
	}
	destinationDir = new File(buildDir, "api")
	classpath = files(subprojects.collect { project ->
		project.sourceSets.main.compileClasspath
	})
}

task schemaZip(type: Zip) {
	group = 'Distribution'
	classifier = 'schema'
	description = "Builds -${classifier} archive containing all " +
		"XSDs for deployment at static.springframework.org/schema."

	duplicatesStrategy = 'exclude'

	subprojects.each { subproject ->
		def Properties schemas = new Properties();
		def shortName = subproject.name.replaceFirst("${rootProject.name}-", '')
		if (subproject.name.endsWith("-core")) {
			shortName = ''
		}

		subproject.sourceSets.main.resources.find {
			it.path.endsWith("META-INF${File.separator}spring.schemas")
		}?.withInputStream { schemas.load(it) }

		for (def key : schemas.keySet()) {
			File xsdFile = subproject.sourceSets.main.resources.find {
				it.path.replaceAll('\\\\', '/').endsWith(schemas.get(key))
			}
			assert xsdFile != null
			into ("integration/${shortName}") {
				from xsdFile.path
			}
		}
	}
}

task docsZip(type: Zip) {
		group = 'Distribution'
		classifier = 'docs'
		description = "Builds -${classifier} archive containing api and reference " +
			"for deployment at static.springframework.org/spring-integration/docs."

		from('src/dist') {
			include 'changelog.txt'
		}

		from (api) {
			into 'api'
		}

		from (reference) {
			into 'reference'
		}
}

task distZip(type: Zip, dependsOn: [docsZip, schemaZip]) {
	group = 'Distribution'
	classifier = 'dist'
	description = "Builds -${classifier} archive, containing all jars and docs, " +
		"suitable for community download page."

	ext.baseDir = "${project.name}-${project.version}";

	from('src/dist') {
		include 'readme.txt'
		include 'license.txt'
		include 'notice.txt'
		into "${baseDir}"
	}

	from(zipTree(docsZip.archivePath)) {
		into "${baseDir}/docs"
	}

	from(zipTree(schemaZip.archivePath)) {
		into "${baseDir}/schema"
	}

	subprojects.each { subproject ->
		into ("${baseDir}/libs") {
			from subproject.jar
			from subproject.sourcesJar
			from subproject.javadocJar
		}
	}
}

// Create an optional "with dependencies" distribution.
// Not published by default; only for use when building from source.
task depsZip(type: Zip, dependsOn: distZip) { zipTask ->
	group = 'Distribution'
	classifier = 'dist-with-deps'
	description = "Builds -${classifier} archive, containing everything " +
		"in the -${distZip.classifier} archive plus all dependencies."

	from zipTree(distZip.archivePath)

	gradle.taskGraph.whenReady { taskGraph ->
		if (taskGraph.hasTask(":${zipTask.name}")) {
			def projectNames = rootProject.subprojects*.name
			def artifacts = new HashSet()
			subprojects.each { subproject ->
				subproject.configurations.runtime.resolvedConfiguration.resolvedArtifacts.each { artifact ->
					def dependency = artifact.moduleVersion.id
					if (!projectNames.contains(dependency.name)) {
						artifacts << artifact.file
					}
				}
			}

			zipTask.from(artifacts) {
				into "${distZip.baseDir}/deps"
			}
		}
	}
}

artifacts {
	archives distZip
	archives docsZip
	archives schemaZip
}

task dist(dependsOn: assemble) {
	group = 'Distribution'
	description = 'Builds -dist, -docs and -schema distribution archives.'
}

task wrapper(type: Wrapper) {
	description = 'Generates gradlew[.bat] scripts'
	gradleVersion = '1.12'
	distributionUrl = "http://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}
