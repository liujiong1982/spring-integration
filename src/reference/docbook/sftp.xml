<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="sftp"
    xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>SFTP Adapters</title>
  <para>
    Spring Integration provides support for file transfer operations via SFTP.
  </para>
  <section id="sftp-intro">
    <title>Introduction</title>
    <para>
      The Secure File Transfer Protocol (SFTP) is a network protocol which allows you to transfer
      files between two computers on the Internet over any reliable stream.
    </para>

    <para>
    The SFTP protocol requires a secure channel, such as SSH, as well as visibility to a client's identity throughout the SFTP session.
    </para>

    <para>
    Spring Integration supports sending and receiving files over SFTP by providing three <emphasis>client</emphasis>
    side endpoints:
    <emphasis>Inbound Channel Adapter</emphasis>, <emphasis>Outbound Channel Adapter</emphasis>, and <emphasis>Outbound Gateway</emphasis>
    It also provides convenient
    namespace configuration to define these <emphasis>client</emphasis> components.

    <programlisting language="xml"><![CDATA[xmlns:int-sftp="http://www.springframework.org/schema/integration/sftp"
xsi:schemaLocation="http://www.springframework.org/schema/integration/sftp
    http://www.springframework.org/schema/integration/sftp/spring-integration-sftp.xsd"]]></programlisting>
    </para>
  </section>

	<section id="sftp-session-factory">
		<title>SFTP Session Factory</title>
		<important>
		Starting with version 3.0, sessions are no longer cached by default. See <xref linkend="sftp-session-caching"/>.
		</important>
		<para>
			Before configuring SFTP adapters, you must configure an <emphasis>SFTP Session
			Factory</emphasis>. You can configure the <emphasis>SFTP Session
			Factory</emphasis> via a regular bean definition:
		</para>
		<programlisting language="xml"><![CDATA[<beans:bean id="sftpSessionFactory"
    class="org.springframework.integration.sftp.session.DefaultSftpSessionFactory">
    <beans:property name="host" value="localhost"/>
    <beans:property name="privateKey" value="classpath:META-INF/keys/sftpTest"/>
    <beans:property name="privateKeyPassphrase" value="springIntegration"/>
    <beans:property name="port" value="22"/>
    <beans:property name="user" value="kermit"/>
</beans:bean>]]></programlisting>

	<para>
		Every time an adapter requests a session object from its
		<interfacename>SessionFactory</interfacename>, a new SFTP session is being
		created. Under the covers, the SFTP Session Factory relies on the
		<ulink url="http://www.jcraft.com/jsch/">JSch</ulink> library to provide
		the SFTP capabilities.
	</para>
	<para>
		However, Spring Integration also supports the caching of SFTP
		sessions, please see <xref linkend="sftp-session-caching"/> for more information.
	</para>
	<important>
		<para>
			JSch supports multiple channels (operations) over a connection to the server. By default,
			the Spring Integration session factory uses a separate physical connection for each channel.
			Since <emphasis>Spring Integration 3.0</emphasis>, you can configure the session factory
			(using a boolean constructor arg - default <code>false</code>) to use a single connection
			to the server and create multiple <code>JSch</code> channels on that single connection.
		</para>
		<para>
			When using this feature, you must wrap the session factory in a caching session
			factory, as described below, so that the connection is not physically closed when
			an operation completes.
		</para>
		<para>
			If the cache is reset, the session is disconnected only when the last channel is closed.
		</para>
		<para>
			The connection will be refreshed if it is found to be disconnected when a new operation
			obtains a session.
		</para>
	</important>
	<note>
		If you experience connectivity problems and would like to trace Session
		creation as well as see which Sessions are polled you may enable it by
		setting the logger to TRACE level (e.g., log4j.category.org.springframework.integration.file=TRACE).
		Please also see <xref linkend="sftp-jsch-logging"/>.
	</note>
	<para>
		Now all you need to do is inject this <emphasis>SFTP Session Factory</emphasis> into your adapters.
	</para>
	<note>
		A more practical way to provide values for the <emphasis>SFTP Session Factory</emphasis> would be via Spring's
		<emphasis><ulink url="http://static.springsource.org/spring/docs/current/spring-framework-reference/html/beans.html#beans-factory-placeholderconfigurer">property
		placeholder support</ulink></emphasis>.
	</note>
		<section id="sftp-session-factory-properties">
			<title>Configuration Properties</title>
			<para>
				Below you will find all properties that are exposed by the
				<classname><ulink url="http://static.springsource.org/spring-integration/api/org/springframework/integration/sftp/session/DefaultSftpSessionFactory.html">DefaultSftpSessionFactory</ulink></classname>.
			</para>
			<para><emphasis role="bold">isSharedSession (constructor argument)</emphasis></para>
			<para>
				When true, a single connection will be used and <code>JSch Channels</code> will be multiplexed.
				Defaults to false.
			</para>
			<para><emphasis role="bold">clientVersion</emphasis></para>
			<para>
				Allows you to set the client version property. It's default
				depends on the underlying JSch version but it will look like:
				<emphasis>SSH-2.0-JSCH-0.1.45</emphasis>
			</para>
			<para><emphasis role="bold">enableDaemonThread</emphasis></para>
			<para>
				If <code>true</code>, all threads will be daemon threads. If set
				to <code>false</code>, normal non-daemon threads will be used
				instead. This property will be set on the underlying
				<ulink url="http://www.jcraft.com/jsch/">JSch</ulink>
				<classname>Session</classname>. There, this property will default
				to <code>false</code>, if not explicitly set.
			</para>

			<para><emphasis role="bold">host</emphasis></para>
			<para>
				The url of the host you want connect to. <emphasis>Mandatory</emphasis>.
			</para>
			<para><emphasis role="bold">hostKeyAlias</emphasis></para>
			<para>
				Sets the host key alias, used when comparing the host key to the
				known hosts list.
			</para>
			<para><emphasis role="bold">knownHosts</emphasis></para>
			<para>
				Specifies the filename that will be used to create a host key
				repository. The resulting file has the same format as OpenSSH's
				<emphasis>known_hosts</emphasis> file.
			</para>
			<para><emphasis role="bold">password</emphasis></para>
			<para>
				The password to authenticate against the remote host. If a
				<emphasis>password</emphasis> is not provided, then the
				<emphasis>privateKey</emphasis> property is mandatory.
			</para>
			<para><emphasis role="bold">port</emphasis></para>
			<para>
				The port over which the SFTP connection shall be established. If
				not specified, this value defaults to <code>22</code>. If specified,
				this properties must be a positive number.
			</para>
			<para><emphasis role="bold">privateKey</emphasis></para>
			<para>
				Allows you to set a
				<interfacename><ulink url="http://static.springsource.org/spring/docs/current/javadoc-api/org/springframework/core/io/Resource.html">Resource</ulink></interfacename>,
				which represents the location of the private key used for
				authenticating against the remote host. If the
				<emphasis>privateKey</emphasis> is not provided, then the
				<emphasis>password</emphasis> property is mandatory.
			</para>
			<para><emphasis role="bold">privateKeyPassphrase</emphasis></para>
			<para>
				The password for the private key. Optional.
			</para>

			<para><emphasis role="bold">proxy</emphasis></para>
			<para>
				Allows for specifying a JSch-based
				<interfacename><ulink url="http://epaul.github.com/jsch-documentation/javadoc/com/jcraft/jsch/Proxy.html">Proxy</ulink></interfacename>.
				If set, then the proxy object is used to create the connection to
				the remote host.
			</para>
			<para><emphasis role="bold">serverAliveCountMax</emphasis></para>
			<para>
				Specifies the number of server-alive messages, which will be sent
				without any reply from the server before disconnecting. If not
				set, this property defaults to <code>1</code>.
			</para>
			<para><emphasis role="bold">serverAliveInterval</emphasis></para>
			<para>
				Sets the timeout interval (milliseconds) before a server alive
				message is sent, in case no message is received from the server.
			</para>
			<para><emphasis role="bold">sessionConfig</emphasis></para>
			<para>
				Using <classname>Properties</classname>, you can set additional
				configuration setting on the underlying JSch Session.
			</para>
			<para><emphasis role="bold">socketFactory</emphasis></para>
			<para>
				Allows you to pass in a
				<interfacename><ulink url="http://epaul.github.com/jsch-documentation/javadoc/com/jcraft/jsch/SocketFactory.html">SocketFactory</ulink></interfacename>.
				The socket factory is used to create a socket to the target host.
				When a proxy is used, the socket factory is passed to the proxy.
				By default plain TCP sockets are used.
			</para>
			<para><emphasis role="bold">timeout</emphasis></para>
			<para>
				The timeout property is used as the socket timeout parameter, as
				well as the default connection timeout. Defaults to <code>0</code>, which means,
				that no timeout will occur.
			</para>
			<para><emphasis role="bold">user</emphasis></para>
			<para>
				The remote user to use. <emphasis>Mandatory</emphasis>.
			</para>
		</section>
	</section>

  <section id="sftp-session-caching">
  	<title>SFTP Session Caching</title>
	<important>
		Starting with <emphasis>Spring Integration version 3.0</emphasis>, sessions are no longer cached by default; the <code>cache-sessions</code> attribute
		is no longer supported on endpoints. You must use a <classname>CachingSessionFactory</classname> (see below) if you
		wish to cache sessions.
	</important>
	<para>
	    In versions prior to 3.0, the sessions were cached automatically by default. A <code>cache-sessions</code> attribute was available for
	    disabling the auto caching, but that solution did not provide a way to configure other session caching attributes. For example,
	    you could not limit on the number of sessions created. To support that requirement and other configuration options, a
	    <classname>CachingSessionFactory</classname> was provided. It provides <code>sessionCacheSize</code> and <code>sessionWaitTimeout</code>
	    properties. As its name suggests, the  <code>sessionCacheSize</code> property controls how many active sessions the factory will
	    maintain in its cache (the DEFAULT is unbounded). If the <code>sessionCacheSize</code> threshold has been reached, any attempt to
	    acquire another session will block until either one of the cached sessions becomes available or until the wait time for a Session
	    expires (the DEFAULT wait time is Integer.MAX_VALUE). The <code>sessionWaitTimeout</code> property enables configuration of that value.
    </para>
    <para>
    If you want your Sessions to be cached, simply configure your default Session Factory as described above and then
    wrap it in an instance of <classname>CachingSessionFactory</classname> where you may provide those additional properties.
	</para>
    <programlisting language="xml"><![CDATA[<bean id="sftpSessionFactory"
    class="org.springframework.integration.sftp.session.DefaultSftpSessionFactory">
    <property name="host" value="localhost"/>
</bean>

<bean id="cachingSessionFactory"
    class="org.springframework.integration.file.remote.session.CachingSessionFactory">
    <constructor-arg ref="sftpSessionFactory"/>
    <property name="sessionCacheSize" value="10"/>
    <property name="sessionWaitTimeout" value="1000"/>
</bean>]]></programlisting>
	<para>
	In the above example you see a <classname>CachingSessionFactory</classname> created with the
	<code>sessionCacheSize</code> set to 10 and the <code>sessionWaitTimeout</code> set to 1 second (its value is in millliseconds).

  	</para>
	<para>
		Starting with <emphasis>Spring Integration version 3.0</emphasis>, the <classname>CachingConnectionFactory</classname>
		provides a <code>resetCache()</code> method. When invoked, all idle sessions are immediately closed and in-use
		sessions are closed when they are returned to the cache. When using <code>isSharedSession=true</code>, the channel is
		closed, and the shared session is closed only when the last channel is closed.
		New requests for sessions will establish new sessions as necessary.
  	</para>
  </section>

   <section id="sftp-rft">
	<title>RemoteFileTemplate</title>
	<para>
		Starting with <emphasis>Spring Integration version 3.0</emphasis>, a new abstraction is provided over the
		<classname>SftpSession</classname> object. The template provides methods to send, retrieve (as an
		<classname>InputStream</classname>), remove, and rename files. In addition an <code>execute</code>
		method is provided allowing the caller to execute multiple operations on the session. In all cases,
		the template takes care of reliably closing the session.
		For more information, refer to the <ulink
		url="http://docs.spring.io/spring-integration/api/org/springframework/integration/file/remote/RemoteFileTemplate.html">javadocs
		for <classname>RemoteFileTemplate</classname></ulink> There is a subclass for SFTP:
		<classname>SftpRemoteFileTemplate</classname>. <!-- TODO: fix the link when 4.1 is released -->
	</para>
	<para>
		Additional methods were added in <emphasis>version 4.1</emphasis> including <code>getClientInstance()</code>
		which provides access to the underlying <classname>ChannelSftp</classname> enabling access to low-level
		APIs.
	</para>
   </section>

   <section id="sftp-inbound">
  	<title>SFTP Inbound Channel Adapter</title>
  	<para>
  	The <emphasis>SFTP Inbound Channel Adapter</emphasis> is a special listener that will connect to the server and listen for
  	the remote directory events (e.g., new file created) at which point it will initiate a file transfer.

  	<programlisting language="xml"><![CDATA[<int-sftp:inbound-channel-adapter id="sftpAdapterAutoCreate"
  			session-factory="sftpSessionFactory"
			channel="requestChannel"
			filename-pattern="*.txt"
			remote-directory="/foo/bar"
			preserve-timestamp="true"
			local-directory="file:target/foo"
			auto-create-local-directory="true"
			local-filename-generator-expression="#this.toUpperCase() + '.a'"
			local-filter="myFilter"
			temporary-file-suffix=".writing"
			delete-remote-files="false">
		<int:poller fixed-rate="1000"/>
</int-sftp:inbound-channel-adapter>]]></programlisting>

	As you can see from the configuration above you can configure the <emphasis>SFTP Inbound Channel Adapter</emphasis> via the
	<code>inbound-channel-adapter</code> element while also providing values for various attributes such as <code>local-directory</code>
	- where files are going to be transferred TO and <code>remote-directory</code> - the remote source directory where files are
	going to be transferred FROM -
	as well as other attributes including a <code>session-factory</code> reference to the bean we configured earlier.
	</para>
	<para>
	By default the transferred file will carry the same name as the original file. If you want to override this behavior you
	can set the <code>local-filename-generator-expression</code> attribute which allows you to provide a SpEL Expression to generate
	the name of the local file. Unlike outbound gateways and adapters where the root object of the SpEL Evaluation Context
	is a <classname>Message</classname>, this inbound adapter does not yet have the Message at the time of evaluation since
	that's what it ultimately generates with the transferred file as its payload. So, the root object of the SpEL Evaluation Context
	is the original name of the remote file (String).
	</para>
	<para>
	Starting with <emphasis>Spring Integration 3.0</emphasis>, you can specify the <code>preserve-timestamp</code>
	attribute (default <code>false</code>); when <code>true</code>, the local file's modified timestamp will be set to the value
	retrieved from the server; otherwise it will be set to the current time.
	</para>
  	<para>
	Sometimes file filtering based on the simple pattern specified via <code>filename-pattern</code> attribute might not be
	sufficient. If this is the case, you can use the <code>filename-regex</code> attribute to specify a Regular Expression
	(e.g. <code>filename-regex=".*\.test$"</code>). And of course if you need complete control you can use the <code>filter</code>
	attribute to provide a reference to a custom implementation of the
	<classname>org.springframework.integration.file.filters.FileListFilter</classname> - a strategy interface for filtering a
	list of files. This filter determines which remote files are retrieved. You can also combine a pattern based filter
	with other filters, such as an <classname>AcceptOnceFileListFilter</classname> to avoid synchronizing files that
	have previously been fetched, by using a <classname>CompositeFileListFilter</classname>.
  	</para>
	<para>
        The <classname>AcceptOnceFileListFilter</classname> stores its state in memory. If you wish the
        state to survive a system restart, consider using the
        <classname>SftpPersistentAcceptOnceFileListFilter</classname> instead. This filter stores
        the accepted file names in an instance of the
        <interfacename>MetadataStore</interfacename> strategy (<xref linkend="metadata-store"/>).
        This filter matches on the filename and the remote modified time.
    </para>
    <para>
        Since <emphasis>version 4.0</emphasis>, this filter requires a <interfacename
        >ConcurrentMetadataStore</interfacename>. When used with a shared data store
        (such as <code>Redis</code> with the <classname>RedisMetadataStore</classname>) this allows
        filter keys to be shared across multiple application or server instances.
    </para>
	<para>
		The above discussion refers to filtering the files before retrieving them. Once the files have been
		retrieved, an additional filter is applied to the files on the file system. By default, this is an
		<classname>AcceptOnceFileListFilter</classname> which, as discussed, retains state in memory and does
		not consider the file's modified time. Unless your application removes files after processing, the
		adapter will re-process the files on disk by default after an application restart.
	</para>
	<para>
		Also, if you configure the <code>filter</code> to use a
		<classname>FtpPersistentAcceptOnceFileListFilter</classname>, and the remote file
		timestamp changes (causing it to be re-fetched), the default local filter will not allow this
		new file to be processed.
	</para>
	<para>
		Use the <code>local-filter</code> attribute to configure the behavior of the local file system
		filter. To solve these particular use cases, you can use a
		<classname>FileSystemPersistentAcceptOnceFileListFilter</classname> as a local filter instead.
		This filter also stores the accepted file names and modified timestamp in an instance of the
		<interfacename>MetadataStore</interfacename> strategy (<xref linkend="metadata-store"/>), and
		will detect the change in the local file modified time.
	</para>
	<important>
		Further, if you use a distributed <interfacename>MetadataStore</interfacename> (such as
		<xref linkend="redis-metadata-store"/> or <xref linkend="gemfire-metadata-store"/>) you can
		have multiple instances of the same adapter/application and be sure that one and only one will
		process a file.
	</important>
	<para>
		The actual local filter is a <classname>CompositeFileListFilter</classname> containing the supplied
		filter and a pattern filter that prevents processing files that are in the process of
		being downloaded (based on the <code>temporary-file-suffix</code>); files are downloaded with
		this suffix (default: <code>.writing</code>) and the file is renamed to its final name when the
		transfer is complete, making it 'visible' to the filter.
	</para>
  	<para>
  	Please refer to the schema for more detail on these attributes.
  	</para>

  	<para>
  	It is also important to understand that <emphasis>SFTP Inbound Channel Adapter</emphasis> is a Polling Consumer and therefore
  	you must configure a poller (either a global default or a local sub-element).
	Once the file has been transferred to a local directory, a Message with <classname>java.io.File</classname> as its
	payload type will be generated and sent to the channel identified by the <code>channel</code> attribute.
  	</para>
  	<para>
  		<emphasis>More on File Filtering and Large Files</emphasis>
  	</para>
  	 <para>
    Sometimes a file that just appeared in the monitored (remote) directory is not complete. Typically such a file
    will be written with some temporary extension (e.g., foo.txt.writing) and then renamed after the writing process completes.
    As a user in most cases you are only interested in files that are complete and would like to filter only those files.
    To handle these scenarios, use filtering support provided via the <code>filename-pattern</code>, <code>filename-regex</code>
    and <code>filter</code> attributes.

	If you need a custom filter implementation simply include a reference in your adapter via the <code>filter</code> attribute.

	<programlisting language="xml"><![CDATA[<int-sftp:inbound-channel-adapter id="sftpInbondAdapter"
			channel="receiveChannel"
			session-factory="sftpSessionFactory"
			filter="customFilter"
			local-directory="file:/local-test-dir"
			remote-directory="/remote-test-dir">
		<int:poller fixed-rate="1000" max-messages-per-poll="10" task-executor="executor"/>
</int-sftp:inbound-channel-adapter>

<bean id="customFilter" class="org.foo.CustomFilter"/>

]]></programlisting>
  	</para>
  </section>

  <section id="sftp-outbound">
  	<title>SFTP Outbound Channel Adapter</title>

  	<para>
  	The <emphasis>SFTP Outbound Channel Adapter</emphasis>is a special <classname>MessageHandler</classname> that will connect to the
  	remote directory and will initiate a file transfer for every file it will receive as the payload of an incoming <classname>Message</classname>.
  	It also supports several representations of the File so you are not limited to the File object.
  	Similar to the FTP outbound adapter, the <emphasis>SFTP Outbound Channel Adapter</emphasis> supports the following payloads:
  	1) <classname>java.io.File</classname> - the actual file object; 2) <classname>byte[]</classname> - byte array that represents
  	the file contents; 3) <classname>java.lang.String</classname> - text that represents the file contents.

  	<programlisting language="xml"><![CDATA[<int-sftp:outbound-channel-adapter id="sftpOutboundAdapter"
    session-factory="sftpSessionFactory"
    channel="inputChannel"
    charset="UTF-8"
    remote-file-separator="/"
    remote-directory="foo/bar"
    remote-filename-generator-expression="payload.getName() + '-foo'"
    filename-generator="fileNameGenerator"
    use-temporary-filename="true"
    mode="REPLACE"/>]]></programlisting>

	As you can see from the configuration above you can configure the <emphasis>SFTP Outbound Channel Adapter</emphasis> via
	the <code>outbound-channel-adapter</code> element.
	Please refer to the schema for more detail on these attributes.
  	</para>
  	<para>
  		<emphasis>SpEL and the SFTP Outbound Adapter</emphasis>
  	</para>
  	<para>
  		As with many other components in Spring Integration, you can benefit from the Spring Expression Language (SpEL) support when configuring
  		an <emphasis>SFTP Outbound Channel Adapter</emphasis>, by specifying two attributes <code>remote-directory-expression</code> and
  		<code>remote-filename-generator-expression</code> (see above). The expression evaluation context will have the Message as its root object, thus allowing
  		you to provide expressions which can dynamically compute the <emphasis>file name</emphasis> or the existing <emphasis>directory path</emphasis>
  		based on the data in the Message (either from 'payload' or 'headers'). In the example above we are defining
        the <code>remote-filename-generator-expression</code> attribute with an expression
  		value that computes the <emphasis>file name</emphasis> based on its original name while also appending a suffix: '-foo'.
  	</para>

    <para>
    Starting with <emphasis>version 4.1</emphasis>, you can specify the <code>mode</code> when transferring the file. By default,
    an existing file will be overwritten; the modes are defined on <code>enum</code>
    <classname>FileExistsMode</classname>, having values <code>REPLACE</code> (default), <code>APPEND</code>,
    <code>IGNORE</code>, and <code>FAIL</code>. With <code>IGNORE</code> and <code>FAIL</code>, the file is not
    transferred; <code>FAIL</code> causes an exception to be thrown whereas <code>IGNORE</code> silently
    ignores the transfer (although a <code>DEBUG</code> log entry is produced).
    </para>

    <para>
      <emphasis>Avoiding Partially Written Files</emphasis>
    </para>
    <para>
    One of the common problems, when dealing with file transfers, is the possibility of processing a <emphasis>partial file</emphasis> -
    a file might appear in the file system before its transfer is actually complete.
    </para>
    <para>
    To deal with this issue, Spring Integration SFTP adapters use a very common algorithm where files are transferred
    under a temporary name and than renamed once they are fully transferred.
    </para>
    <para>
    By default, every file that is in the process of being transferred will appear in the file system with an additional suffix
    which, by default, is <code>.writing</code>; this can be changed using the <code>temporary-file-suffix</code> attribute.
    </para>
    <para>
    However, there may be situations where you don't want to use this technique (for example, if the server does not
    permit renaming files). For situations like this, you can disable this feature by setting <code>use-temporary-file-name</code>
    to <code>false</code> (default is <code>true</code>). When this attribute is <code>false</code>, the file is written with its
    final name and the consuming application will need some other mechanism to detect that the file is completely uploaded before accessing it.
    </para>
  </section>

  <section id="sftp-outbound-gateway">
	<title>SFTP Outbound Gateway</title>

	<para>
	  The <emphasis>SFTP Outbound Gateway</emphasis> provides a limited set of commands to interact with a remote SFTP server.
	  <para>
	    Commands supported are:
	    <itemizedlist>
		  <listitem>ls (list files)</listitem>
		  <listitem>get (retrieve file)</listitem>
		  <listitem>mget (retrieve file(s))</listitem>
		  <listitem>rm (remove file(s))</listitem>
		  <listitem>mv (move/rename file)</listitem>
		  <listitem>put (send file)</listitem>
		  <listitem>mput (send multiple files)</listitem>
	    </itemizedlist>
	  </para>
	  <para><emphasis role="bold">ls</emphasis></para>
	  <para>
	    ls lists remote file(s) and supports the following options:
	    <itemizedlist>
		  <listitem>-1 - just retrieve a list of filenames, default is to retrieve a
		    list of <classname>FileInfo</classname> objects.</listitem>
		  <listitem>-a - include all files (including those starting with '.')</listitem>
		  <listitem>-f - do not sort the list</listitem>
		  <listitem>-dirs - include directories (excluded by default)</listitem>
		  <listitem>-links - include symbolic links (excluded by default)</listitem>
		  <listitem>-R - list the remote directory recursively</listitem>
	    </itemizedlist>
	  </para>
	  <para>
	    In addition, filename filtering is provided, in the same manner as the
	    <classname>inbound-channel-adapter</classname>.
	  </para>
	  <para>
	    The message payload resulting from an <emphasis>ls</emphasis> operation is a list of file names,
	    or a list of <classname>FileInfo</classname> objects. These objects provide
	    information such as modified time, permissions etc.
	  </para>
	  <para>
	    The remote directory that the <emphasis>ls</emphasis> command acted on is provided
	    in the <classname>file_remoteDirectory</classname> header.
	  </para>
	  <para>
	    When using the recursive option (<code>-R</code>), the <code>fileName</code> includes any subdirectory
	    elements, representing a relative path to the file (relative to the remote directory). If the <code>-dirs</code>
	    option is included, each recursive directory is also returned as an element in the list. In this case,
	    it is recommended that the <code>-1</code> is not used because you would not be able to determine files Vs.
	    directories, which is achievable using the <code>FileInfo</code> objects.
	  </para>
	  <para><emphasis role="bold">get</emphasis></para>
	  <para>
	    <emphasis>get</emphasis> retrieves a remote file and supports the following option:
	    <itemizedlist>
		  <listitem>-P - preserve the timestamp of the remote file</listitem>
	    </itemizedlist>
	  </para>
	  <para>
		The message payload resulting from a <emphasis>get</emphasis> operation is a
		<classname>File</classname>	object representing the retrieved file.
	  </para>
	  <para>
	    The remote directory is provided in the <classname>file_remoteDirectory</classname> header, and the filename is
	    provided in the <classname>file_remoteFile</classname> header.
	  </para>
	  <para><emphasis role="bold">mget</emphasis></para>
	  <para>
	    <emphasis>mget</emphasis> retrieves multiple remote files based on a pattern and supports the following option:
	    <itemizedlist>
		  <listitem>-P - preserve the timestamps of the remote files</listitem>
		  <listitem>-x - Throw an exception if no files match the pattern (otherwise an empty
		  list is returned)</listitem>
	    </itemizedlist>
	  </para>
	  <para>
		The message payload resulting from an <emphasis>mget</emphasis> operation is a
		<classname>List&lt;File&gt;</classname>	object - a List of File objects, each representing
		a retrieved file.
	  </para>
	  <para>
	    The remote directory is provided in the <classname>file_remoteDirectory</classname> header, and the pattern
	    for the filenames is
	    provided in the <classname>file_remoteFile</classname> header.
	  </para>
	  <note>
	    <title>Notes for when using recursion (<code>-R</code>)</title>
	    <para>
	      The pattern is ignored, and <code>*</code> is assumed. By
	      default, the entire remote tree is retrieved. However, files in the tree can be filtered, by providing a
	      <classname>FileListFilter</classname>; directories in the tree can also be filtered this way.
	      A <classname>FileListFilter</classname> can be provided by reference or by <code>filename-pattern</code>
	      or <code>filename-regex</code> attributes. For example,
	      <code>filename-regex="(subDir|.*1.txt)"</code> will retrieve all files ending with <code>1.txt</code> in the
	      remote directory and the subdirectory <code>subDir</code>. If a subdirectory is filtered, no additional
	      traversal of that subdirectory is performed.
	    </para>
	    <para>
	      The <code>-dirs</code> option is not allowed (the recursive mget uses the recursive <code>ls</code> to
	      obtain the directory tree and the directories themselves cannot be included in the list).
	    </para>
	    <para>
	      Typically, you would use the <code>#remoteDirectory</code> variable in the <code>local-directory-expression</code>
	      so that the remote directory structure is retained locally.
	    </para>
	  </note>
	  <para><emphasis role="bold">put</emphasis></para>
	  <para>
	    <emphasis>put</emphasis> sends a file to the remote server; the payload of the message can be a
	    <classname>java.io.File</classname>, a <classname>byte[]</classname> or a <classname>String</classname>.
	    A <code>remote-filename-generator</code> (or expression) is used to name the remote file. Other available attributes include
	    <code>remote-directory</code>, <code>temporary-remote-directory</code> (and their <code>*-expression</code>)
	    equivalents, <code>use-temporary-file-name</code>, and <code>auto-create-directory</code>. Refer to the
	    schema documentation for more information.
	  </para>
	  <para>
		The message payload resulting from a <emphasis>put</emphasis> operation is a
		<classname>String</classname> representing the full path of the file on the server after transfer.
	  </para>
	  <para><emphasis role="bold">mput</emphasis></para>
	  <para>
	    <emphasis>mput</emphasis> sends multiple files to the server and supports the following option:
	    <itemizedlist>
		  <listitem>-R - Recursive - send all files (possibly filtered) in the directory and subdirectories</listitem>
	    </itemizedlist>
	  </para>
	  <para>
		The message payload must be a <classname>java.io.File</classname> representing a local directory.
	  </para>
	  <para>
		The same attributes as the <code>put</code> command are supported. In addition, files in the local
		directory can be filtered with one of <code>mput-pattern</code>, <code>mput-regex</code> or
		<code>mput-filter</code>. The filter works with recursion, as long as the subdirectories themselves
		pass the filter. Subdirectories that do not pass the filter are not recursed.
	  </para>
	  <para>
		The message payload resulting from an <emphasis>mget</emphasis> operation is a
		<classname>List&lt;String&gt;</classname>	object - a List of remote file paths resulting from
		the transfer.
	  </para>
	  <para><emphasis role="bold">rm</emphasis></para>
	  <para>
	    The <emphasis>rm</emphasis> command has no options.
	  </para>
	  <para>
		The message payload resulting from an <emphasis>rm</emphasis> operation is Boolean.TRUE if the
		remove was successful, Boolean.FALSE otherwise.
	    The remote directory is provided in the <classname>file_remoteDirectory</classname> header, and the filename is
	    provided in the <classname>file_remoteFile</classname> header.
	  </para>
	  <para><emphasis role="bold">mv</emphasis></para>
	  <para>
		The <emphasis>mv</emphasis> command has no options.
	  </para>
	  <para>
		The <emphasis>expression</emphasis> attribute defines the "from" path and the
		<emphasis>rename-expression</emphasis> attribute defines the "to" path. By default, the
		<emphasis>rename-expression</emphasis> is <code>headers['file_renameTo']</code>. This
		expression must not evaluate to null, or an empty <code>String</code>. If necessary,
		any remote directories needed will be created.
		The payload of the result message is <code>Boolean.TRUE</code>.
		The original remote directory is provided in the <code>file_remoteDirectory</code> header, and the filename is
		provided in the <code>file_remoteFile</code> header. The new path is in
		the <code>file_renameTo</code> header.
	  </para>
	  <para>
		<emphasis role="bold">Additional Information</emphasis>
	  </para>
	  <para>
		The <emphasis>get</emphasis> and <emphasis>mget</emphasis> commands support
		the <emphasis>local-filename-generator-expression</emphasis> attribute. It
		defines a SpEL expression to generate the name of local file(s) during the transfer.
		The root object of the evaluation context is the request Message but, in addition, the <code>remoteFileName</code>
		variable is also available, which is particularly useful for <emphasis>mget</emphasis>, for
		example: <code>local-filename-generator-expression="#remoteFileName.toUpperCase() + headers.foo"</code>
	  </para>
	  <para>
		The <emphasis>get</emphasis> and <emphasis>mget</emphasis> commands support
		the <emphasis>local-directory-expression</emphasis> attribute. It
		defines a SpEL expression to generate the name of local directory(ies) during the transfer.
		The root object of the evaluation context is the request Message but, in addition, the <code>remoteDirectory</code>
		variable is also available, which is particularly useful for <emphasis>mget</emphasis>, for
		example: <code>local-directory-expression="'/tmp/local/' + #remoteDirectory.toUpperCase() + headers.foo"</code>.
		This attribute is mutually exclusive with <emphasis>local-directory</emphasis> attribute.
	  </para>
	  <para>
		For all commands, the PATH that the command acts on is provided by the 'expression'
		property of the gateway. For the mget command, the expression might evaluate to '*', meaning
		retrieve all files, or 'somedirectory/*' etc.
	  </para>
	</para>
	<para>
	  Here is an example of a gateway configured for an ls command...
	  <programlisting language="xml"><![CDATA[<int-ftp:outbound-gateway id="gateway1"
		session-factory="ftpSessionFactory"
		request-channel="inbound1"
		command="ls"
		command-options="-1"
		expression="payload"
		reply-channel="toSplitter"/>
]]></programlisting>
	</para>
	<para>
	  The payload of the message sent to the toSplitter channel is a list of String objects
	  containing the filename of each file. If the <classname>command-options</classname> was
	  omitted, it would be a list of <classname>FileInfo</classname> objects. Options are
	  provided space-delimited, e.g. <classname>command-options="-1 -dirs -links"</classname>.
	</para>

  </section>

  <section id="sftp-jsch-logging">
  	<title>SFTP/JSCH Logging</title>
  	<para>
  	Since we use JSch libraries (http://www.jcraft.com/jsch/) to provide SFTP support, at times you may require
  	 more information from the JSch API itself, especially if something is not working properly
  	 (e.g., Authentication exceptions). Unfortunately JSch does not use commons-logging but instead
  	 relies on custom implementations of their <classname>com.jcraft.jsch.Logger</classname> interface.
  	 As of Spring Integration 2.0.1, we have implemented this interface. So, now all you need to do to enable
  	 JSch logging is to configure your logger the way you usually do. For example, here is valid configuration of a
  	 logger using Log4J.

  	 <programlisting language="java"><![CDATA[log4j.category.com.jcraft.jsch=DEBUG]]></programlisting>

  	</para>
  </section>
</chapter>
